{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { persistStore } from 'redux-persist';\nimport createSagaMiddleware from '@redux-saga/core';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootSaga from './root-saga';\nimport logger from 'redux-logger';\nimport rootReducer from './root-reducer';\nconst sagaMiddlware = createSagaMiddleware();\nconst middlewares = [sagaMiddlware, logger]; // process.env.NODE_ENV === 'development' && middlewares.push(logger);\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middlewares)));\nsagaMiddlware.run(rootSaga);\nexport const persistor = persistStore(store); // Infer the `RootState` and `AppDispatch` types from the store itself","map":{"version":3,"sources":["/home/arnaldo/web-projects/portfolio/life-line-app/src/redux/store.tsx"],"names":["createStore","applyMiddleware","persistStore","createSagaMiddleware","composeWithDevTools","rootSaga","logger","rootReducer","sagaMiddlware","middlewares","store","run","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,oBAAP,MAAiC,kBAAjC;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA,MAAMC,aAAa,GAAGL,oBAAoB,EAA1C;AAEA,MAAMM,WAAW,GAAG,CAACD,aAAD,EAAgBF,MAAhB,CAApB,C,CACA;;AAEA,OAAO,MAAMI,KAAK,GAAGV,WAAW,CAC9BO,WAD8B,EAE9BH,mBAAmB,CAACH,eAAe,CAAC,GAAGQ,WAAJ,CAAhB,CAFW,CAAzB;AAKPD,aAAa,CAACG,GAAd,CAAkBN,QAAlB;AAEA,OAAO,MAAMO,SAAS,GAAGV,YAAY,CAACQ,KAAD,CAA9B,C,CAEP","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport { persistStore } from 'redux-persist';\nimport createSagaMiddleware from '@redux-saga/core';\n\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootSaga from './root-saga';\nimport logger from 'redux-logger';\n\nimport rootReducer from './root-reducer';\n\nconst sagaMiddlware = createSagaMiddleware();\n\nconst middlewares = [sagaMiddlware, logger];\n// process.env.NODE_ENV === 'development' && middlewares.push(logger);\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(...middlewares))\n);\n\nsagaMiddlware.run(rootSaga);\n\nexport const persistor = persistStore(store);\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n"]},"metadata":{},"sourceType":"module"}