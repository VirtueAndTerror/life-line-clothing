{"ast":null,"code":"// @ts-nocheck\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { UserActionTypes } from './user-types';\nimport { getDoc } from 'firebase/firestore';\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signInWithPopup, signOut } from 'firebase/auth';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { SignInSuccess, SignInFailure, signOutSuccess, signOutFailure, signUpFailure, signUpSuccess } from './user-actions';\nexport function* getSnapshot(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield getDoc(userRef);\n    const user = yield {\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    };\n    yield put(SignInSuccess(user));\n  } catch (err) {\n    yield put(SignInFailure(err));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield signInWithPopup(auth, googleProvider);\n    yield getSnapshot(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail(_ref) {\n  let {\n    payload: {\n      email,\n      password\n    }\n  } = _ref;\n\n  try {\n    const {\n      user\n    } = yield signInWithEmailAndPassword(auth, email, password);\n    yield getSnapshot(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    console.log({\n      userAuth\n    });\n    if (!userAuth) return;\n    yield getSnapshot(userAuth);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSignOut() {\n  try {\n    yield signOut(auth);\n    yield put(signOutSuccess());\n  } catch (error) {\n    console.error('From: userSignOut() in user-saga.tsx');\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, userSignOut);\n}\nexport function* signUp(_ref2) {\n  let {\n    payload: {\n      email,\n      password,\n      displayName\n    }\n  } = _ref2;\n\n  try {\n    const {\n      user\n    } = yield createUserWithEmailAndPassword(auth, email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart)]);\n}","map":{"version":3,"sources":["/home/arnaldo/web-projects/portfolio/life-line-app/src/redux/user/user-saga.tsx"],"names":["takeLatest","put","all","call","UserActionTypes","getDoc","createUserWithEmailAndPassword","signInWithEmailAndPassword","signInWithPopup","signOut","auth","googleProvider","createUserProfileDocument","getCurrentUser","SignInSuccess","SignInFailure","signOutSuccess","signOutFailure","signUpFailure","signUpSuccess","getSnapshot","userAuth","userRef","userSnapshot","user","id","data","err","signInWithGoogle","error","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","console","log","onCheckUserSession","CHECK_USER_SESSION","userSignOut","onSignOutStart","SIGN_OUT_START","signUp","displayName","additionalData","onSignUpStart","SIGN_UP_START","userSagas"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { UserActionTypes } from './user-types';\n\nimport { getDoc } from 'firebase/firestore';\nimport {\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signInWithPopup,\n  signOut,\n} from 'firebase/auth';\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n  getCurrentUser,\n} from '../../firebase/firebase.utils';\n\nimport {\n  SignInSuccess,\n  SignInFailure,\n  signOutSuccess,\n  signOutFailure,\n  signUpFailure,\n  signUpSuccess,\n} from './user-actions';\n\nexport function* getSnapshot(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield getDoc(userRef);\n    const user = yield { id: userSnapshot.id, ...userSnapshot.data() };\n    yield put(SignInSuccess(user));\n  } catch (err: any) {\n    yield put(SignInFailure(err));\n  }\n}\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield signInWithPopup(auth, googleProvider);\n    yield getSnapshot(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield signInWithEmailAndPassword(auth, email, password);\n    yield getSnapshot(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    console.log({ userAuth });\n    if (!userAuth) return;\n    yield getSnapshot(userAuth);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* userSignOut() {\n  try {\n    yield signOut(auth);\n    yield put(signOutSuccess());\n  } catch (error) {\n    console.error('From: userSignOut() in user-saga.tsx');\n    yield put(signOutFailure(error));\n  }\n}\n\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, userSignOut);\n}\n\nexport function* signUp({ payload: { email, password, displayName } }) {\n  try {\n    const { user } = yield createUserWithEmailAndPassword(\n      auth,\n      email,\n      password\n    );\n    yield put(signUpSuccess({ user, additionalData: { displayName } }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\n\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START);\n}\n\nexport function* userSagas() {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(onCheckUserSession),\n    call(onSignOutStart),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}