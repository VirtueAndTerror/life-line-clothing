{"ast":null,"code":"//@ts-nocheck\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { UserActionTypes } from './user-types';\nimport { getDoc } from 'firebase/firestore';\nimport { signInWithEmailAndPassword, signInWithPopup } from 'firebase/auth';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils';\nimport { SignInSuccess, SignInFailure } from './user-actions';\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield signInWithPopup(auth, googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield getDoc(userRef);\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n    console.log({\n      user\n    });\n  } catch (err) {\n    yield put(SignInFailure(err));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail(_ref) {\n  let {\n    payload: {\n      email,\n      password\n    }\n  } = _ref;\n\n  try {\n    const {\n      user\n    } = yield signInWithEmailAndPassword(auth, email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield getDoc(userRef);\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n    console.log({\n      user\n    });\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/home/arnaldo/web-projects/portfolio/life-line-app/src/redux/user/user-saga.tsx"],"names":["takeLatest","put","all","call","UserActionTypes","getDoc","signInWithEmailAndPassword","signInWithPopup","auth","googleProvider","createUserProfileDocument","SignInSuccess","SignInFailure","signInWithGoogle","user","userRef","userSnapshot","id","data","console","log","err","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","error","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA;AACA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,SAASC,eAAT,QAAgC,cAAhC;AAEA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,0BAAT,EAAqCC,eAArC,QAA4D,eAA5D;AACA,SACEC,IADF,EAEEC,cAFF,EAGEC,yBAHF,QAIO,+BAJP;AAMA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,OAAO,UAAUC,gBAAV,GAA6B;AAClC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMP,eAAe,CAACC,IAAD,EAAOC,cAAP,CAAtC;AACA,UAAMM,OAAO,GAAG,MAAMZ,IAAI,CAACO,yBAAD,EAA4BI,IAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMX,MAAM,CAACU,OAAD,CAAjC;AACA,UAAMd,GAAG,CAACU,aAAa,CAAC;AAAEM,MAAAA,EAAE,EAAED,YAAY,CAACC,EAAnB;AAAuB,SAAGD,YAAY,CAACE,IAAb;AAA1B,KAAD,CAAd,CAAT;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEN,MAAAA;AAAF,KAAZ;AACD,GAND,CAME,OAAOO,GAAP,EAAiB;AACjB,UAAMpB,GAAG,CAACW,aAAa,CAACS,GAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUC,mBAAV,GAAgC;AACrC,QAAMtB,UAAU,CAACI,eAAe,CAACmB,oBAAjB,EAAuCV,gBAAvC,CAAhB;AACD;AAED,OAAO,UAAUW,eAAV,OAA4D;AAAA,MAAlC;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAAX,GAAkC;;AACjE,MAAI;AACF,UAAM;AAAEb,MAAAA;AAAF,QAAW,MAAMR,0BAA0B,CAACE,IAAD,EAAOkB,KAAP,EAAcC,QAAd,CAAjD;AACA,UAAMZ,OAAO,GAAG,MAAMZ,IAAI,CAACO,yBAAD,EAA4BI,IAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMX,MAAM,CAACU,OAAD,CAAjC;AACA,UAAMd,GAAG,CAACU,aAAa,CAAC;AAAEM,MAAAA,EAAE,EAAED,YAAY,CAACC,EAAnB;AAAuB,SAAGD,YAAY,CAACE,IAAb;AAA1B,KAAD,CAAd,CAAT;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEN,MAAAA;AAAF,KAAZ;AACD,GAND,CAME,OAAOc,KAAP,EAAc;AACd,UAAM3B,GAAG,CAACW,aAAa,CAACgB,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAM7B,UAAU,CAACI,eAAe,CAAC0B,mBAAjB,EAAsCN,eAAtC,CAAhB;AACD;AAED,OAAO,UAAUO,SAAV,GAAsB;AAC3B,QAAM7B,GAAG,CAAC,CAACC,IAAI,CAACmB,mBAAD,CAAL,EAA4BnB,IAAI,CAAC0B,kBAAD,CAAhC,CAAD,CAAT;AACD","sourcesContent":["//@ts-nocheck\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { UserActionTypes } from './user-types';\n\nimport { getDoc } from 'firebase/firestore';\nimport { signInWithEmailAndPassword, signInWithPopup } from 'firebase/auth';\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n} from '../../firebase/firebase.utils';\n\nimport { SignInSuccess, SignInFailure } from './user-actions';\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield signInWithPopup(auth, googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield getDoc(userRef);\n    yield put(SignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n    console.log({ user });\n  } catch (err: any) {\n    yield put(SignInFailure(err));\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield signInWithEmailAndPassword(auth, email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield getDoc(userRef);\n    yield put(SignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n    console.log({ user });\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}