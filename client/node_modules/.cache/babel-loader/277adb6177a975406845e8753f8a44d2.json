{"ast":null,"code":"//@ts-nocheck\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { UserActionTypes } from './user-types';\nimport { getDoc } from 'firebase/firestore';\nimport { signInWithEmailAndPassword, signInWithPopup } from 'firebase/auth';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils';\nimport { googleSignInSuccess, googleSignInFailure, emailSignInSuccess, emailSignInFailure } from './user-actions';\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield signInWithPopup(auth, googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield getDoc(userRef);\n    yield put(googleSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n    console.log({\n      user\n    });\n  } catch (err) {\n    yield put(googleSignInFailure(err));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail(_ref) {\n  let {\n    payload: {\n      email,\n      password\n    }\n  } = _ref;\n\n  try {\n    const {\n      user\n    } = yield signInWithEmailAndPassword(auth, email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield getDoc(userRef);\n    yield put(emailSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n    console.log({\n      user\n    });\n  } catch (error) {\n    yield put(emailSignInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/home/arnaldo/web-projects/portfolio/life-line-app/src/redux/user/user-saga.tsx"],"names":["takeLatest","put","all","call","UserActionTypes","getDoc","signInWithEmailAndPassword","signInWithPopup","auth","googleProvider","createUserProfileDocument","googleSignInSuccess","googleSignInFailure","emailSignInSuccess","emailSignInFailure","signInWithGoogle","user","userRef","userSnapshot","id","data","console","log","err","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","error","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA;AACA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,SAASC,eAAT,QAAgC,cAAhC;AAEA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,0BAAT,EAAqCC,eAArC,QAA4D,eAA5D;AACA,SACEC,IADF,EAEEC,cAFF,EAGEC,yBAHF,QAIO,+BAJP;AAMA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,kBAHF,EAIEC,kBAJF,QAKO,gBALP;AAOA,OAAO,UAAUC,gBAAV,GAA6B;AAClC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMT,eAAe,CAACC,IAAD,EAAOC,cAAP,CAAtC;AACA,UAAMQ,OAAO,GAAG,MAAMd,IAAI,CAACO,yBAAD,EAA4BM,IAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMb,MAAM,CAACY,OAAD,CAAjC;AACA,UAAMhB,GAAG,CACPU,mBAAmB,CAAC;AAAEQ,MAAAA,EAAE,EAAED,YAAY,CAACC,EAAnB;AAAuB,SAAGD,YAAY,CAACE,IAAb;AAA1B,KAAD,CADZ,CAAT;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEN,MAAAA;AAAF,KAAZ;AACD,GARD,CAQE,OAAOO,GAAP,EAAiB;AACjB,UAAMtB,GAAG,CAACW,mBAAmB,CAACW,GAAD,CAApB,CAAT;AACD;AACF;AAED,OAAO,UAAUC,mBAAV,GAAgC;AACrC,QAAMxB,UAAU,CAACI,eAAe,CAACqB,oBAAjB,EAAuCV,gBAAvC,CAAhB;AACD;AAED,OAAO,UAAUW,eAAV,OAA4D;AAAA,MAAlC;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAAX,GAAkC;;AACjE,MAAI;AACF,UAAM;AAAEb,MAAAA;AAAF,QAAW,MAAMV,0BAA0B,CAACE,IAAD,EAAOoB,KAAP,EAAcC,QAAd,CAAjD;AACA,UAAMZ,OAAO,GAAG,MAAMd,IAAI,CAACO,yBAAD,EAA4BM,IAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMb,MAAM,CAACY,OAAD,CAAjC;AACA,UAAMhB,GAAG,CACPY,kBAAkB,CAAC;AAAEM,MAAAA,EAAE,EAAED,YAAY,CAACC,EAAnB;AAAuB,SAAGD,YAAY,CAACE,IAAb;AAA1B,KAAD,CADX,CAAT;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEN,MAAAA;AAAF,KAAZ;AACD,GARD,CAQE,OAAOc,KAAP,EAAc;AACd,UAAM7B,GAAG,CAACa,kBAAkB,CAACgB,KAAD,CAAnB,CAAT;AACD;AACF;AAED,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAM/B,UAAU,CAACI,eAAe,CAAC4B,mBAAjB,EAAsCN,eAAtC,CAAhB;AACD;AAED,OAAO,UAAUO,SAAV,GAAsB;AAC3B,QAAM/B,GAAG,CAAC,CAACC,IAAI,CAACqB,mBAAD,CAAL,EAA4BrB,IAAI,CAAC4B,kBAAD,CAAhC,CAAD,CAAT;AACD","sourcesContent":["//@ts-nocheck\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { UserActionTypes } from './user-types';\n\nimport { getDoc } from 'firebase/firestore';\nimport { signInWithEmailAndPassword, signInWithPopup } from 'firebase/auth';\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n} from '../../firebase/firebase.utils';\n\nimport {\n  googleSignInSuccess,\n  googleSignInFailure,\n  emailSignInSuccess,\n  emailSignInFailure,\n} from './user-actions';\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield signInWithPopup(auth, googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield getDoc(userRef);\n    yield put(\n      googleSignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() })\n    );\n    console.log({ user });\n  } catch (err: any) {\n    yield put(googleSignInFailure(err));\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield signInWithEmailAndPassword(auth, email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield getDoc(userRef);\n    yield put(\n      emailSignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() })\n    );\n    console.log({ user });\n  } catch (error) {\n    yield put(emailSignInFailure(error));\n  }\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}