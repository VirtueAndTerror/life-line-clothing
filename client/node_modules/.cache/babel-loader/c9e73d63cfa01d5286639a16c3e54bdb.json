{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, setDoc, getDoc, doc, collection, writeBatch } from 'firebase/firestore';\nimport { getAuth, GoogleAuthProvider, signInWithPopup, signOut } from 'firebase/auth';\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: 'AIzaSyBgOslrj6gg6djD4c5nTbk400Fo5faxcT4',\n  authDomain: 'crwn-db-48047.firebaseapp.com',\n  databaseURL: 'https://crwn-db-48047.firebaseio.com',\n  projectId: 'crwn-db-48047',\n  storageBucket: 'crwn-db-48047.appspot.com',\n  messagingSenderId: '120995028956',\n  appId: '1:120995028956:web:57b404d4044a67a1'\n}; // Initialize Firebase\n\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n}); // Create new user doc in Frirestore\n\nexport const createUserProfileDocument = async function (userAuth) {\n  let additionalData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', `${userAuth.uid}`);\n  const userDocSnap = await getDoc(userDocRef);\n\n  if (!userDocSnap.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    console.log({\n      UserDocSnap: true,\n      userAuth\n    });\n\n    try {\n      // Add a new doc to the users collection\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (err) {\n      console.error('Error while creating a user --firebase.utils.tsx', err.message);\n    }\n  }\n\n  return userDocRef;\n}; // To use in SingInAndSingUp component\n\nexport const signInWithGoogle = () => signInWithPopup(auth, provider);\nexport const signOutUser = () => {\n  signOut(auth);\n};\nexport const addCollectionAndDocs = async (collectionKey, objsToAdd) => {\n  try {\n    const collectionRef = collection(db, collectionKey);\n    const batch = writeBatch(db);\n    objsToAdd.forEach(obj => {\n      const newDocRef = doc(collectionRef);\n      batch.set(newDocRef, obj);\n    });\n    await batch.commit();\n  } catch (err) {\n    const error = err;\n    console.error('Error while adding collections', error);\n  }\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollections = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(`${title.toLowerCase()}`),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  transformedCollections.reduce((acc, collection) => {\n    // @ts-ignore\n    acc[collection.title.toLowerCase()] = collection;\n    return acc;\n  }, {});\n};\nexport default {\n  db\n};","map":{"version":3,"sources":["/home/arnaldo/web-projects/portfolio/life-line-app/src/firebase/firebase.utils.tsx"],"names":["initializeApp","getFirestore","setDoc","getDoc","doc","collection","writeBatch","getAuth","GoogleAuthProvider","signInWithPopup","signOut","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","app","auth","db","provider","setCustomParameters","prompt","createUserProfileDocument","userAuth","additionalData","userDocRef","uid","userDocSnap","exists","displayName","email","createdAt","Date","console","log","UserDocSnap","err","error","message","signInWithGoogle","signOutUser","addCollectionAndDocs","collectionKey","objsToAdd","collectionRef","batch","forEach","obj","newDocRef","set","commit","convertCollectionsSnapshotToMap","collections","transformedCollections","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","acc"],"mappings":"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","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { FirebaseError, initializeApp } from 'firebase/app';\nimport {\n  getFirestore,\n  setDoc,\n  getDoc,\n  doc,\n  collection,\n  writeBatch,\n  QuerySnapshot,\n} from 'firebase/firestore';\nimport {\n  getAuth,\n  GoogleAuthProvider,\n  signInWithPopup,\n  signOut,\n  User,\n} from 'firebase/auth';\nimport { Item } from '../interfaces';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: 'AIzaSyBgOslrj6gg6djD4c5nTbk400Fo5faxcT4',\n  authDomain: 'crwn-db-48047.firebaseapp.com',\n  databaseURL: 'https://crwn-db-48047.firebaseio.com',\n  projectId: 'crwn-db-48047',\n  storageBucket: 'crwn-db-48047.appspot.com',\n  messagingSenderId: '120995028956',\n  appId: '1:120995028956:web:57b404d4044a67a1',\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\n\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\n\n// Create new user doc in Frirestore\nexport const createUserProfileDocument = async (\n  userAuth: User,\n  additionalData = {}\n) => {\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', `${userAuth.uid}`);\n  const userDocSnap = await getDoc(userDocRef);\n\n  if (!userDocSnap.exists()) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n    console.log({ UserDocSnap: true, userAuth });\n    try {\n      // Add a new doc to the users collection\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (err: any) {\n      console.error(\n        'Error while creating a user --firebase.utils.tsx',\n        err.message\n      );\n    }\n  }\n\n  return userDocRef;\n};\n\n// To use in SingInAndSingUp component\nexport const signInWithGoogle = () => signInWithPopup(auth, provider);\nexport const signOutUser = () => {\n  signOut(auth);\n};\n\nexport const addCollectionAndDocs = async (\n  collectionKey: string,\n  objsToAdd: Item[]\n) => {\n  try {\n    const collectionRef = collection(db, collectionKey);\n\n    const batch = writeBatch(db);\n\n    objsToAdd.forEach((obj) => {\n      const newDocRef = doc(collectionRef);\n\n      batch.set(newDocRef, obj);\n    });\n\n    await batch.commit();\n  } catch (err: any) {\n    const error: FirebaseError = err;\n    console.error('Error while adding collections', error);\n  }\n};\n\nexport const convertCollectionsSnapshotToMap = (collections: QuerySnapshot) => {\n  const transformedCollections = collections.docs.map((doc) => {\n    const { title, items } = doc.data();\n\n    return {\n      routeName: encodeURI(`${title.toLowerCase()}`),\n      id: doc.id,\n      title,\n      items,\n    };\n  });\n\n  transformedCollections.reduce((acc, collection) => {\n    // @ts-ignore\n    acc[collection.title.toLowerCase()] = collection;\n\n    return acc;\n  }, {});\n};\n\nexport default { db };\n"]},"metadata":{},"sourceType":"module"}