{"ast":null,"code":"var _jsxFileName = \"/home/arnaldo/web-projects/portfolio/life-line-app/src/pages/shop/ShopPage.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { collection, onSnapshot } from 'firebase/firestore';\nimport { db, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { updateCollections } from '../../redux/shop/shop-actions';\nimport Spinner from '../../components/with-spinner/WithSpinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ShopPage = _ref => {\n  _s();\n\n  let {\n    updateCollections\n  } = _ref;\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const collectionRef = collection(db, 'collections');\n    let unsusbscribe = onSnapshot(collectionRef, snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      updateCollections(collectionsMap);\n      setIsLoading(false);\n    });\n    return () => unsusbscribe();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"shop-page\",\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 45\n    }, this) : /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 59\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ShopPage, \"Yt82d/dvZsn5nYh5sqDQjv+rJ38=\");\n\n_c = ShopPage;\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nconst connector = connect(null, mapDispatchToProps);\nexport default _c2 = connector(ShopPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ShopPage\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/arnaldo/web-projects/portfolio/life-line-app/src/pages/shop/ShopPage.tsx"],"names":["useEffect","useState","Outlet","connect","collection","onSnapshot","db","convertCollectionsSnapshotToMap","updateCollections","Spinner","ShopPage","isLoading","setIsLoading","collectionRef","unsusbscribe","snapshot","collectionsMap","mapDispatchToProps","dispatch","connector"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,OAAT,QAAwC,aAAxC;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,oBAAvC;AACA,SACEC,EADF,EAEEC,+BAFF,QAGO,+BAHP;AAIA,SAASC,iBAAT,QAAkC,+BAAlC;AAGA,OAAOC,OAAP,MAAoB,2CAApB;;;AAIA,MAAMC,QAAQ,GAAG,QAAoC;AAAA;;AAAA,MAAnC;AAAEF,IAAAA;AAAF,GAAmC;AACnD,QAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,IAAD,CAA1C;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,aAAa,GAAGT,UAAU,CAACE,EAAD,EAAK,aAAL,CAAhC;AACA,QAAIQ,YAAY,GAAGT,UAAU,CAACQ,aAAD,EAAiBE,QAAD,IAAc;AACzD,YAAMC,cAAc,GAAGT,+BAA+B,CAACQ,QAAD,CAAtD;AACAP,MAAAA,iBAAiB,CAACQ,cAAD,CAAjB;AACAJ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAJ4B,CAA7B;AAMA,WAAO,MAAME,YAAY,EAAzB;AACD,GATQ,CAAT;AAWA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,cAA4BH,SAAS,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAiB,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAtD;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CAhBD;;GAAMD,Q;;KAAAA,Q;;AAkBN,MAAMO,kBAAkB,GAAIC,QAAD,KAA4B;AACrDV,EAAAA,iBAAiB,EAAGQ,cAAD,IACjBE,QAAQ,CAACV,iBAAiB,CAACQ,cAAD,CAAlB;AAF2C,CAA5B,CAA3B;;AAKA,MAAMG,SAAS,GAAGhB,OAAO,CAAC,IAAD,EAAOc,kBAAP,CAAzB;AAIA,qBAAeE,SAAS,CAACT,QAAD,CAAxB","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { collection, onSnapshot } from 'firebase/firestore';\nimport {\n  db,\n  convertCollectionsSnapshotToMap,\n} from '../../firebase/firebase.utils';\nimport { updateCollections } from '../../redux/shop/shop-actions';\nimport { AppDispatch } from '../../redux/store';\n\nimport Spinner from '../../components/with-spinner/WithSpinner';\n\ninterface SPProps extends PropsFromRedux {}\n\nconst ShopPage = ({ updateCollections }: SPProps) => {\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const collectionRef = collection(db, 'collections');\n    let unsusbscribe = onSnapshot(collectionRef, (snapshot) => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      updateCollections(collectionsMap);\n      setIsLoading(false);\n    });\n\n    return () => unsusbscribe();\n  });\n\n  return (\n    <div className='shop-page'>{isLoading ? <Spinner /> : <Outlet />}</div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n  updateCollections: (collectionsMap: any) =>\n    dispatch(updateCollections(collectionsMap)),\n});\n\nconst connector = connect(null, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(ShopPage);\n"]},"metadata":{},"sourceType":"module"}