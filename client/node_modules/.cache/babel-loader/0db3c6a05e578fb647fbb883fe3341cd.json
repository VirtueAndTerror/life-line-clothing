{"ast":null,"code":"var _jsxFileName = \"/home/arnaldo/web-projects/portfolio/life-line-app/src/components/sign-in/SignIn.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\n/* Components */\n\nimport FormInput from '../form-input/FormInput';\nimport CustomButton from '../custom-button/CustomButton';\n/* Firebase */\n\nimport { signInWithEmailAndPassword } from 'firebase/auth';\nimport { signInWithGoogle, auth } from '../../firebase/firebase.utils';\nimport { googleSignInStart } from '../../redux/user/user-actions';\n/* CSS */\n\nimport './sign-in.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SignIn extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      const {\n        email,\n        password\n      } = this.state;\n\n      try {\n        await signInWithEmailAndPassword(auth, email, password);\n        this.setState({\n          email: '',\n          password: ''\n        });\n      } catch (err) {\n        const error = err;\n        const errorCode = error.code;\n\n        if (errorCode === 'auth/user-not-found') {\n          this.setState({\n            email: '',\n            password: '',\n            error: {\n              msg: 'Username and password no not match'\n            }\n          });\n        } else {\n          console.error(error);\n        }\n      }\n    };\n\n    this.handleChange = e => {\n      const {\n        value,\n        name\n      } = e.target; // @ts-ignore\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.state = {\n      email: '',\n      password: '',\n      error: null\n    };\n  }\n\n  render() {\n    const {\n      error\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sign-in\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"title\",\n        children: \"I already have an account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Sign in with your email and password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(FormInput, {\n          type: \"email\",\n          name: \"email\",\n          label: \"Email\",\n          value: this.state.email,\n          handleChange: this.handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n          type: \"password\",\n          name: \"password\",\n          label: \"Password\",\n          value: this.state.password,\n          handleChange: this.handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons\",\n          children: [/*#__PURE__*/_jsxDEV(CustomButton, {\n            type: \"submit\",\n            children: \"Sign in\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n            onClick: signInWithGoogle,\n            isGoogleSignIn: true,\n            children: \"Sign in with Google\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"errorMsg\",\n          children: error && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: error === null || error === void 0 ? void 0 : error.msg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 47\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart())\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/home/arnaldo/web-projects/portfolio/life-line-app/src/components/sign-in/SignIn.tsx"],"names":["React","connect","FormInput","CustomButton","signInWithEmailAndPassword","signInWithGoogle","auth","googleSignInStart","SignIn","Component","constructor","props","handleSubmit","e","preventDefault","email","password","state","setState","err","error","errorCode","code","msg","console","handleChange","value","name","target","render","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\n\n/* Components */\nimport FormInput from '../form-input/FormInput';\nimport CustomButton from '../custom-button/CustomButton';\n\n/* Firebase */\nimport { signInWithEmailAndPassword } from 'firebase/auth';\nimport { signInWithGoogle, auth } from '../../firebase/firebase.utils';\nimport { googleSignInStart } from '../../redux/user/user-actions';\n\n/* CSS */\nimport './sign-in.scss';\nimport { FirebaseError } from 'firebase/app';\nimport { AppDispatch } from '../../redux/store';\n\ninterface SignInState {\n  email: string;\n  password: string;\n  error: { msg: string } | null;\n}\n\ninterface SignInProps {}\n\nclass SignIn extends React.Component<SignInProps, SignInState> {\n  constructor(props: SignInProps) {\n    super(props);\n\n    this.state = {\n      email: '',\n      password: '',\n      error: null,\n    };\n  }\n\n  handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const { email, password } = this.state;\n\n    try {\n      await signInWithEmailAndPassword(auth, email, password);\n\n      this.setState({ email: '', password: '' });\n    } catch (err: any) {\n      const error: FirebaseError = err;\n      const errorCode = error.code;\n\n      if (errorCode === 'auth/user-not-found') {\n        this.setState({\n          email: '',\n          password: '',\n          error: { msg: 'Username and password no not match' },\n        });\n      } else {\n        console.error(error);\n      }\n    }\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, name } = e.target;\n    // @ts-ignore\n    this.setState({ [name]: value });\n  };\n\n  render() {\n    const { error } = this.state;\n    return (\n      <div className='sign-in'>\n        <h2 className='title'>I already have an account</h2>\n        <span>Sign in with your email and password</span>\n\n        <form onSubmit={this.handleSubmit}>\n          <FormInput\n            type='email'\n            name='email'\n            label='Email'\n            value={this.state.email}\n            handleChange={this.handleChange}\n            required\n          />\n\n          <FormInput\n            type='password'\n            name='password'\n            label='Password'\n            value={this.state.password}\n            handleChange={this.handleChange}\n            required\n          />\n\n          <div className='buttons'>\n            <CustomButton type='submit'>Sign in</CustomButton>\n            <CustomButton onClick={signInWithGoogle} isGoogleSignIn>\n              Sign in with Google\n            </CustomButton>\n          </div>\n          <div className='errorMsg'>{error && <span>{error?.msg}</span>}</div>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);\n"]},"metadata":{},"sourceType":"module"}