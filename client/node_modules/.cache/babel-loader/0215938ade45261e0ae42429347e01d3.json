{"ast":null,"code":"// @ts-nocheck\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { UserActionTypes } from './user-types';\nimport { getDoc } from 'firebase/firestore';\nimport { signInWithEmailAndPassword, signInWithPopup } from 'firebase/auth';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { SignInSuccess, SignInFailure } from './user-actions';\nexport function* getSnapshot(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield getDoc(userRef);\n    const user = yield {\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    };\n    yield put(SignInSuccess(user));\n  } catch (err) {\n    yield put(SignInFailure(err));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield signInWithPopup(auth, googleProvider);\n    yield getSnapshot(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail(_ref) {\n  let {\n    payload: {\n      email,\n      password\n    }\n  } = _ref;\n\n  try {\n    const {\n      user\n    } = yield signInWithEmailAndPassword(auth, email, password);\n    yield getSnapshot(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    console.log({\n      userAuth\n    });\n    if (!userAuth) return;\n    yield getSnapshot(userAuth);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["/home/arnaldo/web-projects/portfolio/life-line-app/src/redux/user/user-saga.tsx"],"names":["takeLatest","put","all","call","UserActionTypes","getDoc","signInWithEmailAndPassword","signInWithPopup","auth","googleProvider","createUserProfileDocument","getCurrentUser","SignInSuccess","SignInFailure","getSnapshot","userAuth","userRef","userSnapshot","user","id","data","err","signInWithGoogle","error","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","console","log","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA;AACA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,SAASC,eAAT,QAAgC,cAAhC;AAEA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,0BAAT,EAAqCC,eAArC,QAA4D,eAA5D;AACA,SACEC,IADF,EAEEC,cAFF,EAGEC,yBAHF,EAIEC,cAJF,QAKO,+BALP;AAOA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,OAAO,UAAUC,WAAV,CAAsBC,QAAtB,EAAgC;AACrC,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMb,IAAI,CAACO,yBAAD,EAA4BK,QAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMZ,MAAM,CAACW,OAAD,CAAjC;AACA,UAAME,IAAI,GAAG,MAAM;AAAEC,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAnB;AACA,UAAMnB,GAAG,CAACW,aAAa,CAACM,IAAD,CAAd,CAAT;AACD,GALD,CAKE,OAAOG,GAAP,EAAiB;AACjB,UAAMpB,GAAG,CAACY,aAAa,CAACQ,GAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAClC,MAAI;AACF,UAAM;AAAEJ,MAAAA;AAAF,QAAW,MAAMX,eAAe,CAACC,IAAD,EAAOC,cAAP,CAAtC;AACA,UAAMK,WAAW,CAACI,IAAD,CAAjB;AACD,GAHD,CAGE,OAAOK,KAAP,EAAc;AACd,UAAMtB,GAAG,CAACY,aAAa,CAACU,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUC,mBAAV,GAAgC;AACrC,QAAMxB,UAAU,CAACI,eAAe,CAACqB,oBAAjB,EAAuCH,gBAAvC,CAAhB;AACD;AAED,OAAO,UAAUI,eAAV,OAA4D;AAAA,MAAlC;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAAX,GAAkC;;AACjE,MAAI;AACF,UAAM;AAAEX,MAAAA;AAAF,QAAW,MAAMZ,0BAA0B,CAACE,IAAD,EAAOoB,KAAP,EAAcC,QAAd,CAAjD;AACA,UAAMf,WAAW,CAACI,IAAD,CAAjB;AACD,GAHD,CAGE,OAAOK,KAAP,EAAc;AACd,UAAMtB,GAAG,CAACY,aAAa,CAACU,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUO,kBAAV,GAA+B;AACpC,QAAM9B,UAAU,CAACI,eAAe,CAAC2B,mBAAjB,EAAsCL,eAAtC,CAAhB;AACD;AAED,OAAO,UAAUM,mBAAV,GAAgC;AACrC,MAAI;AACF,UAAMjB,QAAQ,GAAG,MAAMJ,cAAc,EAArC;AACAsB,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEnB,MAAAA;AAAF,KAAZ;AACA,QAAI,CAACA,QAAL,EAAe;AACf,UAAMD,WAAW,CAACC,QAAD,CAAjB;AACD,GALD,CAKE,OAAOQ,KAAP,EAAc;AACd,UAAMtB,GAAG,CAACY,aAAa,CAACU,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUY,kBAAV,GAA+B;AACpC,QAAMnC,UAAU,CAACI,eAAe,CAACgC,kBAAjB,EAAqCJ,mBAArC,CAAhB;AACD;AAED,OAAO,UAAUK,SAAV,GAAsB;AAC3B,QAAMnC,GAAG,CAAC,CACRC,IAAI,CAACqB,mBAAD,CADI,EAERrB,IAAI,CAAC2B,kBAAD,CAFI,EAGR3B,IAAI,CAACgC,kBAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["// @ts-nocheck\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { UserActionTypes } from './user-types';\n\nimport { getDoc } from 'firebase/firestore';\nimport { signInWithEmailAndPassword, signInWithPopup } from 'firebase/auth';\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n  getCurrentUser,\n} from '../../firebase/firebase.utils';\n\nimport { SignInSuccess, SignInFailure } from './user-actions';\n\nexport function* getSnapshot(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield getDoc(userRef);\n    const user = yield { id: userSnapshot.id, ...userSnapshot.data() };\n    yield put(SignInSuccess(user));\n  } catch (err: any) {\n    yield put(SignInFailure(err));\n  }\n}\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield signInWithPopup(auth, googleProvider);\n    yield getSnapshot(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield signInWithEmailAndPassword(auth, email, password);\n    yield getSnapshot(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    console.log({ userAuth });\n    if (!userAuth) return;\n    yield getSnapshot(userAuth);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* userSagas() {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(onCheckUserSession),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}