{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, Timestamp, setDoc, getDoc, doc } from 'firebase/firestore';\nimport { getAuth, GoogleAuthProvider, signInWithPopup, signOut } from 'firebase/auth'; // Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyBgOslrj6gg6djD4c5nTbk400Fo5faxcT4',\n  authDomain: 'crwn-db-48047.firebaseapp.com',\n  databaseURL: 'https://crwn-db-48047.firebaseio.com',\n  projectId: 'crwn-db-48047',\n  storageBucket: 'crwn-db-48047.appspot.com',\n  messagingSenderId: '120995028956',\n  appId: '1:120995028956:web:57b404d4044a67a1'\n}; // Initialize Firebase\n\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const createUserProfileDocument = async function (userAuth) {\n  let additionalData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', `${userAuth.uid}`);\n  const userDocSnap = await getDoc(userDocRef);\n\n  if (!userDocSnap.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n\n    try {\n      // Add a new doc to the users collection\n      await setDoc(doc(db, 'users'), {\n        displayName,\n        email,\n        createdAt: Timestamp.fromDate(new Date()),\n        ...additionalData\n      });\n    } catch (err) {\n      console.error('Error while creating a user', err.message);\n    }\n  }\n};\n/* const getDocument = async (userAuth: User | null) => {\n  const docRef = doc(db, 'users', `${userAuth ? userAuth.uid : ''}`);\n  const docSnap = await getDoc(docRef);\n\n  if (!docSnap.exists()) {\n    const {displayName, email } = userAuth;\n  } else {\n  }\n};\n\n// getDocument();\n\nexport const createUserProfileDocument = async (\n  userAuth: User | null,\n  additionalData = {}\n) => {\n  if (!userAuth) return;\n\n  getDocument(userAuth);\n}; */\n// To use in SingInAndSingUp component\n\nexport const signInWithGoogle = () => signInWithPopup(auth, provider);\nexport const signOutUser = () => {\n  signOut(auth);\n};\nexport default {\n  db\n};","map":{"version":3,"sources":["/home/arnaldo/web-projects/portfolio/my-app/src/firebase/firebase.utils.tsx"],"names":["initializeApp","getFirestore","Timestamp","setDoc","getDoc","doc","getAuth","GoogleAuthProvider","signInWithPopup","signOut","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","app","auth","db","provider","setCustomParameters","prompt","createUserProfileDocument","userAuth","additionalData","userDocRef","uid","userDocSnap","exists","displayName","email","createdAt","fromDate","Date","err","console","error","message","signInWithGoogle","signOutUser"],"mappings":"AAAA;AACA,SAAwBA,aAAxB,QAA6C,cAA7C;AACA,SACEC,YADF,EAEEC,SAFF,EAKEC,MALF,EAMEC,MANF,EAOEC,GAPF,QASO,oBATP;AAUA,SACEC,OADF,EAGEC,kBAHF,EAIEC,eAJF,EAKEC,OALF,QAOO,eAPP,C,CASA;;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,+BAFS;AAGrBC,EAAAA,WAAW,EAAE,sCAHQ;AAIrBC,EAAAA,SAAS,EAAE,eAJU;AAKrBC,EAAAA,aAAa,EAAE,2BALM;AAMrBC,EAAAA,iBAAiB,EAAE,cANE;AAOrBC,EAAAA,KAAK,EAAE;AAPc,CAAvB,C,CAUA;;AACA,MAAMC,GAAG,GAAGlB,aAAa,CAACU,cAAD,CAAzB;AACA,OAAO,MAAMS,IAAI,GAAGb,OAAO,CAACY,GAAD,CAApB;AACP,OAAO,MAAME,EAAE,GAAGnB,YAAY,CAACiB,GAAD,CAAvB;AAEP,MAAMG,QAAQ,GAAG,IAAId,kBAAJ,EAAjB;AACAc,QAAQ,CAACC,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AAEA,OAAO,MAAMC,yBAAyB,GAAG,gBACvCC,QADuC,EAGpC;AAAA,MADHC,cACG,uEADc,EACd;AACH,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,UAAU,GAAGtB,GAAG,CAACe,EAAD,EAAK,OAAL,EAAe,GAAEK,QAAQ,CAACG,GAAI,EAA9B,CAAtB;AACA,QAAMC,WAAW,GAAG,MAAMzB,MAAM,CAACuB,UAAD,CAAhC;;AAEA,MAAI,CAACE,WAAW,CAACC,MAAZ,EAAL,EAA2B;AACzB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBP,QAA/B;;AACA,QAAI;AACF;AACA,YAAMtB,MAAM,CAACE,GAAG,CAACe,EAAD,EAAK,OAAL,CAAJ,EAAmB;AAC7BW,QAAAA,WAD6B;AAE7BC,QAAAA,KAF6B;AAG7BC,QAAAA,SAAS,EAAE/B,SAAS,CAACgC,QAAV,CAAmB,IAAIC,IAAJ,EAAnB,CAHkB;AAI7B,WAAGT;AAJ0B,OAAnB,CAAZ;AAMD,KARD,CAQE,OAAOU,GAAP,EAAiB;AACjBC,MAAAA,OAAO,CAACC,KAAR,CAAc,6BAAd,EAA6CF,GAAG,CAACG,OAAjD;AACD;AACF;AACF,CAvBM;AAyBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAMhC,eAAe,CAACW,IAAD,EAAOE,QAAP,CAA9C;AACP,OAAO,MAAMoB,WAAW,GAAG,MAAM;AAC/BhC,EAAAA,OAAO,CAACU,IAAD,CAAP;AACD,CAFM;AAIP,eAAe;AAAEC,EAAAA;AAAF,CAAf","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { FirebaseError, initializeApp } from 'firebase/app';\nimport {\n  getFirestore,\n  Timestamp,\n  collection,\n  getDocs,\n  setDoc,\n  getDoc,\n  doc,\n  FirestoreError,\n} from 'firebase/firestore';\nimport {\n  getAuth,\n  onAuthStateChanged,\n  GoogleAuthProvider,\n  signInWithPopup,\n  signOut,\n  User,\n} from 'firebase/auth';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: 'AIzaSyBgOslrj6gg6djD4c5nTbk400Fo5faxcT4',\n  authDomain: 'crwn-db-48047.firebaseapp.com',\n  databaseURL: 'https://crwn-db-48047.firebaseio.com',\n  projectId: 'crwn-db-48047',\n  storageBucket: 'crwn-db-48047.appspot.com',\n  messagingSenderId: '120995028956',\n  appId: '1:120995028956:web:57b404d4044a67a1',\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\n\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\n\nexport const createUserProfileDocument = async (\n  userAuth: User,\n  additionalData = {}\n) => {\n  if (!userAuth) return;\n\n  const userDocRef = doc(db, 'users', `${userAuth.uid}`);\n  const userDocSnap = await getDoc(userDocRef);\n\n  if (!userDocSnap.exists()) {\n    const { displayName, email } = userAuth;\n    try {\n      // Add a new doc to the users collection\n      await setDoc(doc(db, 'users'), {\n        displayName,\n        email,\n        createdAt: Timestamp.fromDate(new Date()),\n        ...additionalData,\n      });\n    } catch (err: any) {\n      console.error('Error while creating a user', err.message);\n    }\n  }\n};\n\n/* const getDocument = async (userAuth: User | null) => {\n  const docRef = doc(db, 'users', `${userAuth ? userAuth.uid : ''}`);\n  const docSnap = await getDoc(docRef);\n\n  if (!docSnap.exists()) {\n    const {displayName, email } = userAuth;\n  } else {\n  }\n};\n\n// getDocument();\n\nexport const createUserProfileDocument = async (\n  userAuth: User | null,\n  additionalData = {}\n) => {\n  if (!userAuth) return;\n\n  getDocument(userAuth);\n}; */\n\n// To use in SingInAndSingUp component\nexport const signInWithGoogle = () => signInWithPopup(auth, provider);\nexport const signOutUser = () => {\n  signOut(auth);\n};\n\nexport default { db };\n"]},"metadata":{},"sourceType":"module"}