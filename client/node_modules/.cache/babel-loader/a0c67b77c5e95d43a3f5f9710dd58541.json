{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, onSnapshot, setDoc, getDoc, doc } from 'firebase/firestore';\nimport { getAuth, onAuthStateChanged, GoogleAuthProvider, signInWithPopup, signOut } from 'firebase/auth'; // Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyBgOslrj6gg6djD4c5nTbk400Fo5faxcT4',\n  authDomain: 'crwn-db-48047.firebaseapp.com',\n  databaseURL: 'https://crwn-db-48047.firebaseio.com',\n  projectId: 'crwn-db-48047',\n  storageBucket: 'crwn-db-48047.appspot.com',\n  messagingSenderId: '120995028956',\n  appId: '1:120995028956:web:57b404d4044a67a1'\n}; // Initialize Firebase\n\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n}); // Create new user doc in Frirestore\n\nexport const createUserProfileDocument = async function (userAuth) {\n  let additionalData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', `${userAuth.uid}`);\n  const userDocSnap = await getDoc(userDocRef);\n\n  if (!userDocSnap.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    console.log({\n      UserDocSnap: true,\n      userAuth\n    });\n\n    try {\n      // Add a new doc to the users collection\n      await setDoc(doc(db, 'users'), {\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (err) {\n      console.error('Error while creating a user --firebase.utils.tsx', err);\n    }\n  }\n\n  return userDocRef;\n}; // @Todo - refactor utils function\n// Handle Suscription - to use inside useEffect() at App.tsx\n\nexport const handleSubscription = () => {\n  let unsubscrbe = onAuthStateChanged(auth, async userAuth => {\n    if (userAuth) {\n      const userDocRef = await createUserProfileDocument(userAuth, {});\n\n      if (userDocRef) {\n        onSnapshot(userDocRef, doc => {\n          const currentUser = {\n            id: doc.id,\n            ...doc.data()\n          };\n        });\n      }\n    }\n  });\n  return {\n    unsubscrbe\n  }; // This should be the currentUser to pass to setCurrentUser() on App.tsx\n}; // To use in SingInAndSingUp component\n\nexport const signInWithGoogle = () => signInWithPopup(auth, provider);\nexport const signOutUser = () => {\n  signOut(auth);\n};\nexport default {\n  db\n};","map":{"version":3,"sources":["/home/arnaldo/web-projects/portfolio/my-app/src/firebase/firebase.utils.tsx"],"names":["initializeApp","getFirestore","onSnapshot","setDoc","getDoc","doc","getAuth","onAuthStateChanged","GoogleAuthProvider","signInWithPopup","signOut","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","app","auth","db","provider","setCustomParameters","prompt","createUserProfileDocument","userAuth","additionalData","userDocRef","uid","userDocSnap","exists","displayName","email","createdAt","Date","console","log","UserDocSnap","err","error","handleSubscription","unsubscrbe","currentUser","id","data","signInWithGoogle","signOutUser"],"mappings":"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","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { FirebaseError, initializeApp } from 'firebase/app';\nimport {\n  getFirestore,\n  onSnapshot,\n  Timestamp,\n  collection,\n  getDocs,\n  setDoc,\n  getDoc,\n  doc,\n} from 'firebase/firestore';\nimport {\n  getAuth,\n  onAuthStateChanged,\n  GoogleAuthProvider,\n  signInWithPopup,\n  signOut,\n  User,\n} from 'firebase/auth';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: 'AIzaSyBgOslrj6gg6djD4c5nTbk400Fo5faxcT4',\n  authDomain: 'crwn-db-48047.firebaseapp.com',\n  databaseURL: 'https://crwn-db-48047.firebaseio.com',\n  projectId: 'crwn-db-48047',\n  storageBucket: 'crwn-db-48047.appspot.com',\n  messagingSenderId: '120995028956',\n  appId: '1:120995028956:web:57b404d4044a67a1',\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\n\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\n\n// Create new user doc in Frirestore\nexport const createUserProfileDocument = async (\n  userAuth: User,\n  additionalData = {}\n) => {\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', `${userAuth.uid}`);\n  const userDocSnap = await getDoc(userDocRef);\n\n  if (!userDocSnap.exists()) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n    console.log({ UserDocSnap: true, userAuth });\n    try {\n      // Add a new doc to the users collection\n      await setDoc(doc(db, 'users'), {\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (err: any) {\n      console.error('Error while creating a user --firebase.utils.tsx', err);\n    }\n  }\n\n  return userDocRef;\n};\n\n// @Todo - refactor utils function\n// Handle Suscription - to use inside useEffect() at App.tsx\nexport const handleSubscription = () => {\n  let unsubscrbe = onAuthStateChanged(auth, async (userAuth) => {\n    if (userAuth) {\n      const userDocRef = await createUserProfileDocument(userAuth, {});\n\n      if (userDocRef) {\n        onSnapshot(userDocRef, (doc) => {\n          const currentUser = {\n            id: doc.id,\n            ...doc.data(),\n          };\n        });\n      }\n    }\n  });\n\n  return { unsubscrbe }; // This should be the currentUser to pass to setCurrentUser() on App.tsx\n};\n\n// To use in SingInAndSingUp component\nexport const signInWithGoogle = () => signInWithPopup(auth, provider);\nexport const signOutUser = () => {\n  signOut(auth);\n};\n\nexport default { db };\n"]},"metadata":{},"sourceType":"module"}