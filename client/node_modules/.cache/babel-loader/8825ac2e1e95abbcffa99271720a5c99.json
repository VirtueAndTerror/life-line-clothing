{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { persistStore } from 'redux-persist';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport logger from 'redux-logger';\nimport rootReducer from './root-reducer';\nconst middlewares = [thunk.withExtraArgument(logger)];\nprocess.env.NODE_ENV === 'development' && middlewares.push(logger);\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middlewares)));\nexport const persistor = persistStore(store); // Infer the `RootState` and `AppDispatch` types from the store itself","map":{"version":3,"sources":["/home/arnaldo/web-projects/portfolio/life-line-app/src/redux/store.tsx"],"names":["createStore","applyMiddleware","persistStore","thunk","composeWithDevTools","logger","rootReducer","middlewares","withExtraArgument","process","env","NODE_ENV","push","store","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAAwD,OAAxD;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,KAAP,MAAoD,aAApD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA,MAAMC,WAAW,GAAG,CAACJ,KAAK,CAACK,iBAAN,CAAwBH,MAAxB,CAAD,CAApB;AACAI,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,IAA0CJ,WAAW,CAACK,IAAZ,CAAiBP,MAAjB,CAA1C;AAEA,OAAO,MAAMQ,KAAK,GAAGb,WAAW,CAC9BM,WAD8B,EAE9BF,mBAAmB,CAACH,eAAe,CAAC,GAAGM,WAAJ,CAAhB,CAFW,CAAzB;AAKP,OAAO,MAAMO,SAAS,GAAGZ,YAAY,CAACW,KAAD,CAA9B,C,CAEP","sourcesContent":["import { createStore, applyMiddleware, AnyAction } from 'redux';\nimport { persistStore } from 'redux-persist';\nimport thunk, { ThunkMiddleware, ThunkAction } from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport logger from 'redux-logger';\n\nimport rootReducer from './root-reducer';\n\nconst middlewares = [thunk.withExtraArgument(logger)];\nprocess.env.NODE_ENV === 'development' && middlewares.push(logger);\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(...middlewares))\n);\n\nexport const persistor = persistStore(store);\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n// Redux Tunk\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  AnyAction\n>;\n"]},"metadata":{},"sourceType":"module"}